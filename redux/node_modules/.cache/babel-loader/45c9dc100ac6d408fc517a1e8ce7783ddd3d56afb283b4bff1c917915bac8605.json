{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nimport redux, { createStore } from 'redux';\nconst initialState = {\n  counter: 0,\n  isShow: true\n};\n\n// name, initialState, reducers가 필요함.\n//initialState은 초기에 이름이 같은 변수를 선언해 초기화해주면 자동으로 할당해줌\n//immer라는 패키지를 통해 자동으로 새로운 값을 만들어 반환해줌 \nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      state.counter++;\n    },\n    decrement: state => {\n      state.counter--;\n    },\n    increase: (state, action) => {\n      state.counter += action.payload;\n    },\n    toggle: state => {\n      state.isShow = !state.isShow;\n    }\n  }\n});\n\n// const counterReducer = (state=initVal, action) => {\n//     if(action.type === \"increment\"){\n//         //사용하지도 않는 isShow를 업데이트해주는 이유\n//         // => 업데이트를 안해주면 자동으로 isShow는 undefined가 되기 때문에 false밖에 안나옴.\n//         //reducer는 기존값을 업데이트해주는 것이 아닌, 새로운 값을 반환해 줘야 됨.\n//         return(\n//             {\n//                 counter : state.counter +1,\n//                 isShow : state.isShow,\n//             }\n//         )\n//     }\n//     if(action.type ==='increse'){\n//         return {\n//             counter: state.counter + action.amount,\n//             isShow : state.isShow,\n//         }\n//     }\n\n//     if(action.type === 'decrement'){\n//         return(\n//             {\n//                 counter : state.counter -1,\n//                 isShow : state.isShow,\n//             }\n//         )\n//     }\n\n//     if(action.type === 'toggle'){\n//         return(\n//             {\n//                 counter: state.counter,\n//                 isShow : !state.isShow,\n//             }\n//         )\n//     }\n\n//     return state;\n// }\n\n//store에는 기본적으로 reducer가 들어감.\n//const store = createStore(counterReducer);\n\nexport const counterAction = counterSlice.actions;\n//configureStore은 여러 개의 Slice를 저장 할 수 있음(key값을 이용해)\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","redux","createStore","initialState","counter","isShow","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggle","counterAction","actions","store","reducer"],"sources":["/Users/yuseonjong/Desktop/React_study_bootcamp/redux/src/store/index.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit'\nimport redux, { createStore } from 'redux'\n\n\nconst initialState = {counter:0, isShow:true}\n\n// name, initialState, reducers가 필요함.\n//initialState은 초기에 이름이 같은 변수를 선언해 초기화해주면 자동으로 할당해줌\n//immer라는 패키지를 통해 자동으로 새로운 값을 만들어 반환해줌 \nconst counterSlice = createSlice({\n    name:'counter',\n    initialState,\n    reducers:{\n        increment: (state) => {\n            state.counter++;\n        },\n        decrement: (state) => {\n            state.counter--;\n        },\n        increase: (state,action) => {\n            state.counter += action.payload;\n        },\n        toggle: (state) => {\n            state.isShow = !state.isShow;\n        }\n    }\n})\n\n// const counterReducer = (state=initVal, action) => {\n//     if(action.type === \"increment\"){\n//         //사용하지도 않는 isShow를 업데이트해주는 이유\n//         // => 업데이트를 안해주면 자동으로 isShow는 undefined가 되기 때문에 false밖에 안나옴.\n//         //reducer는 기존값을 업데이트해주는 것이 아닌, 새로운 값을 반환해 줘야 됨.\n//         return(\n//             {\n//                 counter : state.counter +1,\n//                 isShow : state.isShow,\n//             }\n//         )\n//     }\n//     if(action.type ==='increse'){\n//         return {\n//             counter: state.counter + action.amount,\n//             isShow : state.isShow,\n//         }\n//     }\n\n//     if(action.type === 'decrement'){\n//         return(\n//             {\n//                 counter : state.counter -1,\n//                 isShow : state.isShow,\n//             }\n//         )\n//     }\n\n//     if(action.type === 'toggle'){\n//         return(\n//             {\n//                 counter: state.counter,\n//                 isShow : !state.isShow,\n//             }\n//         )\n//     }\n\n//     return state;\n// }\n\n//store에는 기본적으로 reducer가 들어감.\n//const store = createStore(counterReducer);\n\nexport const counterAction =  counterSlice.actions\n//configureStore은 여러 개의 Slice를 저장 할 수 있음(key값을 이용해)\nconst store = configureStore({\n    reducer:counterSlice.reducer\n})\nexport default store;"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAC9D,OAAOC,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAG1C,MAAMC,YAAY,GAAG;EAACC,OAAO,EAAC,CAAC;EAAEC,MAAM,EAAC;AAAI,CAAC;;AAE7C;AACA;AACA;AACA,MAAMC,YAAY,GAAGN,WAAW,CAAC;EAC7BO,IAAI,EAAC,SAAS;EACdJ,YAAY;EACZK,QAAQ,EAAC;IACLC,SAAS,EAAGC,KAAK,IAAK;MAClBA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDO,SAAS,EAAGD,KAAK,IAAK;MAClBA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDQ,QAAQ,EAAEA,CAACF,KAAK,EAACG,MAAM,KAAK;MACxBH,KAAK,CAACN,OAAO,IAAIS,MAAM,CAACC,OAAO;IACnC,CAAC;IACDC,MAAM,EAAGL,KAAK,IAAK;MACfA,KAAK,CAACL,MAAM,GAAG,CAACK,KAAK,CAACL,MAAM;IAChC;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,OAAO,MAAMW,aAAa,GAAIV,YAAY,CAACW,OAAO;AAClD;AACA,MAAMC,KAAK,GAAGnB,cAAc,CAAC;EACzBoB,OAAO,EAACb,YAAY,CAACa;AACzB,CAAC,CAAC;AACF,eAAeD,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}