{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nimport redux, { createStore } from 'redux';\nconst initialCountrrState = {\n  counter: 0,\n  isShow: true\n};\n\n// name, initialState, reducers가 필요함.\n//initialState은 초기에 이름이 같은 변수를 선언해 초기화해주면 자동으로 할당해줌\n//immer라는 패키지를 통해 자동으로 새로운 값을 만들어 반환해줌 \nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCountrrState,\n  reducers: {\n    increment: state => {\n      state.counter++;\n    },\n    decrement: state => {\n      state.counter--;\n    },\n    increase: (state, action) => {\n      state.counter += action.payload;\n    },\n    toggle: state => {\n      state.isShow = !state.isShow;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// const counterReducer = (state=initVal, action) => {\n//     if(action.type === \"increment\"){\n//         //사용하지도 않는 isShow를 업데이트해주는 이유\n//         // => 업데이트를 안해주면 자동으로 isShow는 undefined가 되기 때문에 false밖에 안나옴.\n//         //reducer는 기존값을 업데이트해주는 것이 아닌, 새로운 값을 반환해 줘야 됨.\n//         return(\n//             {\n//                 counter : state.counter +1,\n//                 isShow : state.isShow,\n//             }\n//         )\n//     }\n//     if(action.type ==='increse'){\n//         return {\n//             counter: state.counter + action.amount,\n//             isShow : state.isShow,\n//         }\n//     }\n\n//     if(action.type === 'decrement'){\n//         return(\n//             {\n//                 counter : state.counter -1,\n//                 isShow : state.isShow,\n//             }\n//         )\n//     }\n\n//     if(action.type === 'toggle'){\n//         return(\n//             {\n//                 counter: state.counter,\n//                 isShow : !state.isShow,\n//             }\n//         )\n//     }\n\n//     return state;\n// }\n\n//store에는 기본적으로 reducer가 들어감.\n//const store = createStore(counterReducer);\n\n//configureStore은 여러 개의 Slice를 저장 할 수 있음(key값을 이용해)\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterAction = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","redux","createStore","initialCountrrState","counter","isShow","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggle","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterAction","actions","authActions"],"sources":["/Users/yuseonjong/Desktop/React_study_bootcamp/redux/src/store/index.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit'\nimport redux, { createStore } from 'redux'\n\n\nconst initialCountrrState = {counter:0, isShow:true}\n\n// name, initialState, reducers가 필요함.\n//initialState은 초기에 이름이 같은 변수를 선언해 초기화해주면 자동으로 할당해줌\n//immer라는 패키지를 통해 자동으로 새로운 값을 만들어 반환해줌 \nconst counterSlice = createSlice({\n    name:'counter',\n    initialState:initialCountrrState,\n    reducers:{\n        increment: (state) => {\n            state.counter++;\n        },\n        decrement: (state) => {\n            state.counter--;\n        },\n        increase: (state,action) => {\n            state.counter += action.payload;\n        },\n        toggle: (state) => {\n            state.isShow = !state.isShow;\n        }\n    }\n})\n\nconst initialAuthState = {isAuthenticated:false}\n\nconst authSlice = createSlice({\n    name:'auth',\n    initialState: initialAuthState,\n    reducers:{\n        login(state){\n            state.isAuthenticated = true;\n        },\n        logout(state){\n            state.isAuthenticated = false;\n        }\n    }\n});\n\n// const counterReducer = (state=initVal, action) => {\n//     if(action.type === \"increment\"){\n//         //사용하지도 않는 isShow를 업데이트해주는 이유\n//         // => 업데이트를 안해주면 자동으로 isShow는 undefined가 되기 때문에 false밖에 안나옴.\n//         //reducer는 기존값을 업데이트해주는 것이 아닌, 새로운 값을 반환해 줘야 됨.\n//         return(\n//             {\n//                 counter : state.counter +1,\n//                 isShow : state.isShow,\n//             }\n//         )\n//     }\n//     if(action.type ==='increse'){\n//         return {\n//             counter: state.counter + action.amount,\n//             isShow : state.isShow,\n//         }\n//     }\n\n//     if(action.type === 'decrement'){\n//         return(\n//             {\n//                 counter : state.counter -1,\n//                 isShow : state.isShow,\n//             }\n//         )\n//     }\n\n//     if(action.type === 'toggle'){\n//         return(\n//             {\n//                 counter: state.counter,\n//                 isShow : !state.isShow,\n//             }\n//         )\n//     }\n\n//     return state;\n// }\n\n//store에는 기본적으로 reducer가 들어감.\n//const store = createStore(counterReducer);\n\n//configureStore은 여러 개의 Slice를 저장 할 수 있음(key값을 이용해)\nconst store = configureStore({\n    reducer:{counter: counterSlice.reducer, auth:authSlice.reducer},\n});\n\nexport const counterAction =  counterSlice.actions\nexport const authActions = authSlice.actions\nexport default store;"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAC9D,OAAOC,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAG1C,MAAMC,mBAAmB,GAAG;EAACC,OAAO,EAAC,CAAC;EAAEC,MAAM,EAAC;AAAI,CAAC;;AAEpD;AACA;AACA;AACA,MAAMC,YAAY,GAAGN,WAAW,CAAC;EAC7BO,IAAI,EAAC,SAAS;EACdC,YAAY,EAACL,mBAAmB;EAChCM,QAAQ,EAAC;IACLC,SAAS,EAAGC,KAAK,IAAK;MAClBA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDQ,SAAS,EAAGD,KAAK,IAAK;MAClBA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDS,QAAQ,EAAEA,CAACF,KAAK,EAACG,MAAM,KAAK;MACxBH,KAAK,CAACP,OAAO,IAAIU,MAAM,CAACC,OAAO;IACnC,CAAC;IACDC,MAAM,EAAGL,KAAK,IAAK;MACfA,KAAK,CAACN,MAAM,GAAG,CAACM,KAAK,CAACN,MAAM;IAChC;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMY,gBAAgB,GAAG;EAACC,eAAe,EAAC;AAAK,CAAC;AAEhD,MAAMC,SAAS,GAAGnB,WAAW,CAAC;EAC1BO,IAAI,EAAC,MAAM;EACXC,YAAY,EAAES,gBAAgB;EAC9BR,QAAQ,EAAC;IACLW,KAAKA,CAACT,KAAK,EAAC;MACRA,KAAK,CAACO,eAAe,GAAG,IAAI;IAChC,CAAC;IACDG,MAAMA,CAACV,KAAK,EAAC;MACTA,KAAK,CAACO,eAAe,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,MAAMI,KAAK,GAAGvB,cAAc,CAAC;EACzBwB,OAAO,EAAC;IAACnB,OAAO,EAAEE,YAAY,CAACiB,OAAO;IAAEC,IAAI,EAACL,SAAS,CAACI;EAAO;AAClE,CAAC,CAAC;AAEF,OAAO,MAAME,aAAa,GAAInB,YAAY,CAACoB,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAAO;AAC5C,eAAeJ,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}